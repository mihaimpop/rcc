{"version":3,"sources":["config/DataHoc.js","config/Request.js","App.js","serviceWorker.js","index.js"],"names":["DataHOC","props","callData","fetch","then","response","json","data","setState","state","intervalId","setInterval","this","clearInterval","children","Component","App","confirmed","country","deaths","lastUpdate","recovered","setData","attributes","features","Country_Region","Confirmed","Deaths","Recovered","Last_Update","renderCounter","className","start","end","delay","duration","countUpRef","ref","Date","href","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uRAGqBA,G,kBAEnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAmBRC,SAAW,WCnBgBC,MAL3B,iaD0BKC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAACG,GACL,EAAKC,SAAS,CAACD,aAtBnB,EAAKE,MAAQ,CACXC,WAAY,KACZH,KAAM,MAJS,E,iFASf,IAAMG,EAAaC,YAAYC,KAAKV,SAAU,MAE9CU,KAAKJ,SAAS,CAACE,WAAYA,IAC3BE,KAAKV,a,6CAKPW,cAAcD,KAAKH,MAAMC,c,+BAWjB,IACDH,EAAQK,KAAKH,MAAbF,KACP,OACEK,KAAKX,MAAMa,SAASP,O,GAjCWQ,cEGhBC,E,2MACnBT,KAAO,CACLU,UAAW,EACXC,QAAS,KACTC,OAAQ,EACRC,WAAY,KACZC,UAAW,G,EAGbC,QAAU,SAACf,GACT,GAAKA,EAAL,CADkB,IAKVgB,EADahB,EAAbiB,SACwB,GAAxBD,WAEUL,EAKdK,EALFE,eACWR,EAITM,EAJFG,UACQP,EAGNI,EAHFI,OACWN,EAETE,EAFFK,UACaR,EACXG,EADFM,YAGF,EAAKtB,KAAO,CAAEW,UAASD,YAAWE,SAAQE,YAAWD,gB,EAGvDU,cAAgB,SAACvB,GACf,IAAKA,EACH,OAAO,KAFe,IAMhBgB,EADahB,EAAbiB,SACwB,GAAxBD,WAEUL,EAKdK,EALFE,eACWR,EAITM,EAJFG,UACQP,EAGNI,EAHFI,OACWN,EAETE,EAFFK,UACaR,EACXG,EADFM,YAGF,OACE,yBAAKE,UAAU,aACb,wBAAIA,UAAU,eAAeb,EAA7B,mBACA,6BACE,yBAAKa,UAAU,eACb,2CACA,kBAAC,IAAD,CACEC,MAAY,EAAKzB,KAAKU,UACtBgB,IAAKhB,EACLiB,MAAO,EACPC,SAAU,OAET,YAAqB,IAAlBC,EAAiB,EAAjBA,WAEF,OADA,EAAKd,QAAQf,GAEX,6BACE,0BAAM8B,IAAKD,SAMrB,yBAAKL,UAAU,eACb,wCACA,kBAAC,IAAD,CACEC,MAAY,EAAKzB,KAAKY,OACtBc,IAAKd,EACLe,MAAO,EACPC,SAAU,OAET,YAAqB,IAAlBC,EAAiB,EAAjBA,WACF,OACE,6BACE,0BAAMC,IAAKD,SAMrB,yBAAKL,UAAU,eACb,2CACA,kBAAC,IAAD,CACEC,MAAY,EAAKzB,KAAKc,UACtBY,IAAKZ,EACLa,MAAO,EACPC,SAAU,OAET,YAAqB,IAAlBC,EAAiB,EAAjBA,WACF,OACE,6BACE,0BAAMC,IAAKD,UAOvB,wBAAIL,UAAU,eAAd,0BACmB,IAAIO,KAAKlB,KAE5B,yBAAKW,UAAU,yBACZ,WACD,uBAAGQ,KAAK,qGAAR,8B,wEAaN,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,KAAUnB,KAAKkB,oB,GAtHUU,IAAMzB,WCMnB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f3c61bfe.chunk.js","sourcesContent":["import {Component} from 'react';\r\nimport { dataReq } from './Request';\r\n\r\nexport default class DataHOC extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      intervalId: null,\r\n      data: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n      const intervalId = setInterval(this.callData, 1800000);\r\n      // store intervalId in the state so it can be accessed later:\r\n      this.setState({intervalId: intervalId});\r\n      this.callData();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // use intervalId from the state to clear the interval\r\n    clearInterval(this.state.intervalId);\r\n  }\r\n\r\n  callData = () => {\r\n    dataReq()\r\n      .then((response => response.json()))\r\n      .then((data) => {\r\n        this.setState({data})\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state;\r\n    return (\r\n      this.props.children(data)\r\n    );\r\n  }\r\n}","const DATA_URL =\r\n  'https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/1/' +\r\n  'query?f=json&where=(Confirmed%20%3E%200)%20AND%20(Recovered%3C%3E0)%20AND%20(Country_Region%3D%27Romania%27)' +\r\n  '&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Recovered%20desc%2CCountry_Region%20asc%2C' +\r\n  'Province_State%20asc&outSR=102100&resultOffset=0&resultRecordCount=250&cacheHint=true';\r\n\r\nexport const dataReq = () => fetch(DATA_URL);\r\n","import React from 'react';\r\nimport CountUp from 'react-countup';\r\n\r\nimport './App.css';\r\nimport DataHOC from './config/DataHoc';\r\n\r\nexport default class App extends React.Component {\r\n  data = {\r\n    confirmed: 0,\r\n    country: null,\r\n    deaths: 0,\r\n    lastUpdate: null,\r\n    recovered: 0,\r\n  };\r\n\r\n  setData = (data) => {\r\n    if (!data) {\r\n      return;\r\n    }\r\n    const { features } = data;\r\n    const { attributes } = features[0];\r\n    const {\r\n      Country_Region: country,\r\n      Confirmed: confirmed,\r\n      Deaths: deaths,\r\n      Recovered: recovered,\r\n      Last_Update: lastUpdate,\r\n    } = attributes;\r\n\r\n    this.data = { country, confirmed, deaths, recovered, lastUpdate };\r\n  };\r\n\r\n  renderCounter = (data) => {\r\n    if (!data) {\r\n      return null;\r\n    }\r\n\r\n    const { features } = data;\r\n    const { attributes } = features[0];\r\n    const {\r\n      Country_Region: country,\r\n      Confirmed: confirmed,\r\n      Deaths: deaths,\r\n      Recovered: recovered,\r\n      Last_Update: lastUpdate,\r\n    } = attributes;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"text-center\">{country} Corona Counter</h3>\r\n        <div>\r\n          <div className=\"inline-data\">\r\n            <span>Confirmed</span>\r\n            <CountUp\r\n              start={0 || this.data.confirmed}\r\n              end={confirmed}\r\n              delay={0}\r\n              duration={2.75}\r\n            >\r\n              {({ countUpRef }) => {\r\n                this.setData(data);\r\n                return (\r\n                  <div>\r\n                    <span ref={countUpRef} />\r\n                  </div>\r\n                );\r\n              }}\r\n            </CountUp>\r\n          </div>\r\n          <div className=\"inline-data\">\r\n            <span>Deaths</span>\r\n            <CountUp\r\n              start={0 || this.data.deaths}\r\n              end={deaths}\r\n              delay={0}\r\n              duration={2.75}\r\n            >\r\n              {({ countUpRef }) => {\r\n                return (\r\n                  <div>\r\n                    <span ref={countUpRef} />\r\n                  </div>\r\n                );\r\n              }}\r\n            </CountUp>\r\n          </div>\r\n          <div className=\"inline-data\">\r\n            <span>Recovered</span>\r\n            <CountUp\r\n              start={0 || this.data.recovered}\r\n              end={recovered}\r\n              delay={0}\r\n              duration={2.75}\r\n            >\r\n              {({ countUpRef }) => {\r\n                return (\r\n                  <div>\r\n                    <span ref={countUpRef} />\r\n                  </div>\r\n                );\r\n              }}\r\n            </CountUp>\r\n          </div>\r\n        </div>\r\n        <h6 className=\"text-center\">\r\n          Last update: {`${new Date(lastUpdate)}`}\r\n        </h6>\r\n        <div className=\"text-center reference\">\r\n          {'Data by '}\r\n          <a href=\"https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">\r\n            John Hopkins University\r\n          </a>\r\n        </div>\r\n        {/* <div className=\"text-center reference\">\r\n          <label>Update interval: </label>\r\n          <input type=\"number\"></input>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <DataHOC>{this.renderCounter}</DataHOC>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}